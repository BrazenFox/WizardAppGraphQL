# GraphQL schema example
#
# https://gqlgen.com/getting-started/


input Token{
    token:String!
}

input LoginRequest {
    username:String!
    password:String!
}

input RequestWithID{
    id:ID!
    token:String!
}

input CreateUser{
    username:String!
    password:String!
    roles:[String!]!
    token:String!
}

input UpdateUser{
    id:ID!
    username:String!
    password:String!
    roles:[String!]!
    token:String!
}

input InputUser{
    id: ID!
}
input CreateWizard{
    name:String!
    creator:InputUser!
    pages:[InputPage!]!
    token:String!
}
input UpdateWizard{
    id:ID!
    name:String!
    creator:InputUser!
    pages:[InputPage!]!
    token:String!
}

input InputPage{
    name:String!
    type:String!
    content:String!
    buttons:[InputButton!]!
}
input InputButton{
    name:String!
    toPage:InputToPage!
}
input InputToPage{
    name:String!
}
input CreateResult{
    token:String!
    user_id:ID!
    wizard_id:ID!
    notes:[InputNote!]!
}
input InputNote{
    page:InputPageResult!
    button:InputButtonResult!
}
input InputPageResult{
    id:ID!
}
input InputButtonResult{
    id:ID!
}

type User {
    id: ID!
    username: String!
    password:String!
    roles:[Role!]!
}

type Role{
    id:ID!
    name:String!
}

type Wizard{
    id:ID!
    name:String!
    creator:User!
    pages:[Page!]!
}

type Page{
    id:ID!
    name:String!
    type:String!
    content:String!
    buttons:[Button!]!
}
type Button{
    id:ID!
    name:String!
    toPage:Page!
}

type LoginResponse {
    id: ID!
    username:String!
    roles:[String!]!
    tokenType:String!
    accessToken:String!
}

type BadResponse{
    path:String!
    message:String!
    status:Int!
    error:String!
}


type Result{
    id:ID!
    wizard:Wizard!
    user:User!
    date:String!
    note:[Note!]!
}

type Note{
    page:Page!
    button:Button!
}



type Query {
    logoutAuth:String!
    getUsers(input:Token!):[User!]!
    getUser(input:RequestWithID!):User!
    getWizards(input:Token!):[Wizard!]!
    getWizard(input:RequestWithID!):Wizard!
    getResultsForUser(input:RequestWithID!):[Result!]!
    getResultsForModer(input:RequestWithID!):[Result!]!
    getResults(input:Token!):[Result!]!
}

type Mutation {
    loginAuth(input:LoginRequest!): LoginResponse!
    createUser(input:CreateUser!):String!
    updateUser(input:UpdateUser!):String!
    deleteUser(input:RequestWithID):String!
    createWizard(input:CreateWizard):String!
    updateWizard(input:UpdateWizard):String!
    deleteWizard(input:RequestWithID):String!
    createResult(input:CreateResult):String!

}
scalar Response


